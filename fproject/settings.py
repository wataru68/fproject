# プロジェクト全体の設定情報が保存されたモジュール
"""
Django settings for fproject project.

Generated by 'django-admin startproject' using Django 3.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from django.contrib.messages import constants
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
# BASE_DIRはプロジェクト全体のベースとなディレクトリの絶対パスを登録しておく環境変数
# .resolve()は相対パスを絶対パスに変換
# これによりfpojectの絶対パスが取得できる
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# パスワードを強化するための文字列
SECRET_KEY = '5j$h40x)^ao52!&81ag-8lr8bhao=2&29=#r^ye+ot9qapvhb_'

# SECURITY WARNING: don't run with debug turned on in production!
# Webアプリを実行する際のデバッグモードの有効(True)、無効(False)を登録するための環境変数
DEBUG = True

# クライアント(ブラウザー)からのリクエストを受け付けるサーバーのアドレスを登録しておくための環境変数
ALLOWED_HOSTS = []


# Application definition
# インストール済みのアプリ(Djangoのプロジェクト内部で使われるアプリ)がリスト形式で登録されている
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # 作成したブログアプリを追加
    'blog.apps.BlogConfig',
]

# Webアプリで使用するミドルウェアを登録する環境変数
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]
# プロジェクトのURLconfの場所が登録されている
ROOT_URLCONF = 'fproject.urls'

# テンプレ―トに関する基本的な処理を設定する環境変数
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# WSGIを実行するための関数を登録するための環境変数
# WSGI:WebサーバーとWebアプリを接続するための仕組み
WSGI_APPLICATION = 'fproject.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

# データベースを登録するための環境変数
# デフォルトのSQLite3以外のデータベースを使い際はここで変更
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

# パスワードの妥当性をチェックするための仕組みを登録する環境変数
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'ja'

TIME_ZONE = 'Asia/Tokyo'

# 多言語化機能を有効にするか否かを指定する
USE_I18N = True

# 日付フォーマットを地域ごとに適用する昨日を有効にするか否かを指定する
USE_L10N = True

# タイムゾーン(時間帯を)変換する昨日を有効にするか否かを指定する
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

# 静的ファイルを納めたフォルダーのURL(相対パス)を指定する
STATIC_URL = '/static/'

# constantsをインポート
# レベル定数を指定するための環境変数MESSAGE_TAGS
MESSAGE_TAG = {
    constants.SUCCESS: 'alert alert-success',
}

# メール送信のためのクラスを設定
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# メールサーバーへの接続設定
DEFAULT_EMAIL = 'nishidawataru12@gmail.com'
EMAIL_PORT = 587
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_HOST_USER = 'nishidawataru@gmail.com'
EMAIL_HOST_PASSWORD = 'ngrlmsdifckhkffq'
EMAIL_USE_TLS = True
